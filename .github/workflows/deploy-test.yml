name: Deploy to Test Environment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy_and_build:
    name: Deploy Infrastructure and Build Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      # Generate random passwords for database and JWT secret
      - name: Generate random passwords
        run: |
          # Use hex encoding instead of base64 to avoid special characters
          DB_PASSWORD=$(openssl rand -hex 16)
          JWT_SECRET=$(openssl rand -hex 32)
          
          # Store these values in AWS SSM Parameter Store for future use
          aws ssm put-parameter --name "/spearpoint/test/db_password" --value "${DB_PASSWORD}" --type "SecureString" --overwrite
          aws ssm put-parameter --name "/spearpoint/test/jwt_secret" --value "${JWT_SECRET}" --type "SecureString" --overwrite
      
      - name: Get AWS Account ID
        id: aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "account_id=${AWS_ACCOUNT_ID}" >> $GITHUB_OUTPUT
      
      - name: Terraform Init
        run: |
          cd terraform/environments/test
          terraform init
      
      - name: Terraform Validate
        run: |
          cd terraform/environments/test
          terraform validate
      
      - name: Terraform Plan
        run: |
          cd terraform/environments/test
          # Retrieve the passwords from SSM to ensure consistency
          DB_PASSWORD=$(aws ssm get-parameter --name "/spearpoint/test/db_password" --with-decryption --query "Parameter.Value" --output text)
          JWT_SECRET=$(aws ssm get-parameter --name "/spearpoint/test/jwt_secret" --with-decryption --query "Parameter.Value" --output text)
          
          terraform plan -var="db_password=${DB_PASSWORD}" \
                        -var="jwt_secret=${JWT_SECRET}" \
                        -var="aws_account_id=${{ steps.aws-account.outputs.account_id }}"
      
      - name: Terraform Apply
        run: |
          cd terraform/environments/test
          # Retrieve the passwords from SSM to ensure consistency
          DB_PASSWORD=$(aws ssm get-parameter --name "/spearpoint/test/db_password" --with-decryption --query "Parameter.Value" --output text)
          JWT_SECRET=$(aws ssm get-parameter --name "/spearpoint/test/jwt_secret" --with-decryption --query "Parameter.Value" --output text)
          
          terraform apply -var="db_password=${DB_PASSWORD}" \
                         -var="jwt_secret=${JWT_SECRET}" \
                         -var="aws_account_id=${{ steps.aws-account.outputs.account_id }}" \
                         -auto-approve
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Build and push the backend image
      - name: Build and push backend image
        run: |
          # Get AWS account ID and region
          ACCOUNT_ID="${{ steps.aws-account.outputs.account_id }}"
          AWS_REGION=$(aws configure get region)
          
          # Construct the ECR URL
          BACKEND_REPO="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/spearpoint-test-backend"
          
          # Build and push using Docker directly
          cd packages/dashboard/backend
          docker build -t ${BACKEND_REPO}:latest -t ${BACKEND_REPO}:${{ github.sha }} .
          docker push ${BACKEND_REPO}:latest
          docker push ${BACKEND_REPO}:${{ github.sha }}
      
      # Build and push the frontend image
      - name: Build and push frontend image
        run: |
          # Get AWS account ID and region
          ACCOUNT_ID="${{ steps.aws-account.outputs.account_id }}"
          AWS_REGION=$(aws configure get region)
          
          # Construct the ECR URL
          FRONTEND_REPO="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/spearpoint-test-frontend"
          
          # Build and push using Docker directly
          cd packages/dashboard/frontend
          docker build -t ${FRONTEND_REPO}:latest -t ${FRONTEND_REPO}:${{ github.sha }} .
          docker push ${FRONTEND_REPO}:latest
          docker push ${FRONTEND_REPO}:${{ github.sha }}
      
      # Update the ECS services
      - name: Force ECS service updates
        run: |
          cd terraform/environments/test
          
          # Try to get actual values from terraform if possible
          # Use fallback values if terraform output fails
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "spearpoint-test-cluster")
          BACKEND_SERVICE=$(terraform output -raw backend_service_name 2>/dev/null || echo "spearpoint-test-backend")
          FRONTEND_SERVICE=$(terraform output -raw frontend_service_name 2>/dev/null || echo "spearpoint-test-frontend")
          
          echo "Updating services in cluster: ${CLUSTER_NAME}"
          echo "Backend service: ${BACKEND_SERVICE}"
          echo "Frontend service: ${FRONTEND_SERVICE}"
          
          aws ecs update-service --cluster ${CLUSTER_NAME} --service ${BACKEND_SERVICE} --force-new-deployment
          aws ecs update-service --cluster ${CLUSTER_NAME} --service ${FRONTEND_SERVICE} --force-new-deployment
      
      # Wait for services to stabilize
      - name: Wait for services to stabilize
        run: |
          cd terraform/environments/test
          
          # Try to get actual values from terraform if possible
          # Use fallback values if terraform output fails
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "spearpoint-test-cluster")
          BACKEND_SERVICE=$(terraform output -raw backend_service_name 2>/dev/null || echo "spearpoint-test-backend")
          FRONTEND_SERVICE=$(terraform output -raw frontend_service_name 2>/dev/null || echo "spearpoint-test-frontend")
          
          aws ecs wait services-stable --cluster ${CLUSTER_NAME} --services ${BACKEND_SERVICE} ${FRONTEND_SERVICE}
          
      # Output deployment complete
      - name: Deployment complete
        run: |
          echo "::notice::Application deployment completed successfully!"
          echo "::notice::Credentials are stored in AWS SSM Parameter Store as /spearpoint/test/db_password and /spearpoint/test/jwt_secret"